#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Zipkin
  module AnnotationType
    BOOL = 0
    BYTES = 1
    I16 = 2
    I32 = 3
    I64 = 4
    DOUBLE = 5
    STRING = 6
    VALUE_MAP = {0 => "BOOL", 1 => "BYTES", 2 => "I16", 3 => "I32", 4 => "I64", 5 => "DOUBLE", 6 => "STRING"}
    VALID_VALUES = Set.new([BOOL, BYTES, I16, I32, I64, DOUBLE, STRING]).freeze
  end

  class Endpoint
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IPV4 = 1
    PORT = 2
    SERVICE_NAME = 3

    FIELDS = {
      IPV4 => {:type => ::Thrift::Types::I32, :name => 'ipv4'},
      PORT => {:type => ::Thrift::Types::I16, :name => 'port'},
      SERVICE_NAME => {:type => ::Thrift::Types::STRING, :name => 'service_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Annotation
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TIMESTAMP = 1
    VALUE = 2
    HOST = 3
    DURATION = 4

    FIELDS = {
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'},
      HOST => {:type => ::Thrift::Types::STRUCT, :name => 'host', :class => ::Zipkin::Endpoint, :optional => true},
      DURATION => {:type => ::Thrift::Types::I32, :name => 'duration', :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BinaryAnnotation
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    ANNOTATION_TYPE = 3
    HOST = 4

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value', :binary => true},
      ANNOTATION_TYPE => {:type => ::Thrift::Types::I32, :name => 'annotation_type', :enum_class => ::Zipkin::AnnotationType},
      HOST => {:type => ::Thrift::Types::STRUCT, :name => 'host', :class => ::Zipkin::Endpoint, :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @annotation_type.nil? || ::Zipkin::AnnotationType::VALID_VALUES.include?(@annotation_type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field annotation_type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Span
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TRACE_ID = 1
    NAME = 3
    ID = 4
    PARENT_ID = 5
    ANNOTATIONS = 6
    BINARY_ANNOTATIONS = 8
    DEBUG = 9

    FIELDS = {
      TRACE_ID => {:type => ::Thrift::Types::I64, :name => 'trace_id'},
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
      ID => {:type => ::Thrift::Types::I64, :name => 'id'},
      PARENT_ID => {:type => ::Thrift::Types::I64, :name => 'parent_id', :optional => true},
      ANNOTATIONS => {:type => ::Thrift::Types::LIST, :name => 'annotations', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Zipkin::Annotation}},
      BINARY_ANNOTATIONS => {:type => ::Thrift::Types::LIST, :name => 'binary_annotations', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Zipkin::BinaryAnnotation}},
      DEBUG => {:type => ::Thrift::Types::BOOL, :name => 'debug', :default => false, :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end
